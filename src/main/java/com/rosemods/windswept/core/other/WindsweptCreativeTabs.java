package com.rosemods.windswept.core.other;

import net.fabricmc.fabric.api.itemgroup.v1.ItemGroupEvents;
import net.minecraft.world.item.Items;
import net.minecraft.world.level.block.Blocks;

import static com.rosemods.windswept.core.registry.WindsweptBlocks.*;
import static com.rosemods.windswept.core.registry.WindsweptItems.*;
import static net.minecraft.world.item.CreativeModeTabs.*;

public final class WindsweptCreativeTabs {
    public static void setupTabEditors() {
        ItemGroupEvents.modifyEntriesEvent(BUILDING_BLOCKS).register(entries -> {
            entries.addBefore(Blocks.BAMBOO_BLOCK, HOLLY_LOG, HOLLY_WOOD, STRIPPED_HOLLY_LOG, STRIPPED_HOLLY_WOOD, HOLLY_PLANKS);
            entries.addBefore(Blocks.BAMBOO_BLOCK,
                    HOLLY_STAIRS, HOLLY_SLAB, HOLLY_FENCE, HOLLY_FENCE_GATE, HOLLY_DOOR, HOLLY_TRAPDOOR, HOLLY_PRESSURE_PLATE, HOLLY_BUTTON,
                    CHESTNUT_LOG, CHESTNUT_WOOD, STRIPPED_CHESTNUT_LOG, STRIPPED_CHESTNUT_WOOD, CHESTNUT_PLANKS);
            entries.addBefore(Blocks.BAMBOO_BLOCK,
                    CHESTNUT_STAIRS, CHESTNUT_SLAB, CHESTNUT_FENCE, CHESTNUT_FENCE_GATE, CHESTNUT_DOOR, CHESTNUT_TRAPDOOR, CHESTNUT_PRESSURE_PLATE, CHESTNUT_BUTTON,
                    PINE_LOG, PINE_WOOD, WEATHERED_PINE_LOG, WEATHERED_PINE_WOOD, STRIPPED_PINE_LOG, STRIPPED_PINE_WOOD, PINE_PLANKS);
            entries.addBefore(Blocks.BAMBOO_BLOCK,
                    PINE_STAIRS, PINE_SLAB, PINE_FENCE, PINE_FENCE_GATE, PINE_DOOR, PINE_TRAPDOOR, PINE_PRESSURE_PLATE, PINE_BUTTON);
            entries.addAfter(Blocks.MOSSY_COBBLESTONE_WALL, DRY_MOSSY_COBBLESTONE, DRY_MOSSY_COBBLESTONE_STAIRS, DRY_MOSSY_COBBLESTONE_SLAB, DRY_MOSSY_COBBLESTONE_WALL);
            entries.addAfter(Blocks.MOSSY_STONE_BRICK_WALL, DRY_MOSSY_STONE_BRICKS, DRY_MOSSY_STONE_BRICK_STAIRS, DRY_MOSSY_STONE_BRICK_SLAB, DRY_MOSSY_STONE_BRICK_WALL);
            entries.addAfter(Blocks.POLISHED_ANDESITE_SLAB, SHALE, SHALE_STAIRS, SHALE_SLAB, SHALE_WALL, POLISHED_SHALE, POLISHED_SHALE_STAIRS, POLISHED_SHALE_SLAB, POLISHED_SHALE_WALL,
                    POLISHED_SHALE_BRICKS, CHISELED_POLISHED_SHALE_BRICKS, POLISHED_SHALE_BRICK_STAIRS, POLISHED_SHALE_BRICK_SLAB, POLISHED_SHALE_BRICK_WALL);
            entries.addAfter(Blocks.MUD_BRICK_WALL, PINECONE_BLOCK, PINECONE_SHINGLES, PINECONE_SHINGLE_STAIRS, PINECONE_SHINGLE_SLAB,
                    LUNALITE, LUNALITE_STAIRS, LUNALITE_SLAB, LUNALITE_WALL, CUT_LUNALITE, CUT_LUNALITE_STAIRS, CUT_LUNALITE_SLAB, CUT_LUNALITE_WALL,
                    CUT_LUNALITE_BRICKS, CHISELED_CUT_LUNALITE_BRICKS, CUT_LUNALITE_BRICK_STAIRS, CUT_LUNALITE_BRICK_SLAB, CUT_LUNALITE_BRICK_WALL, SMOOTH_LUNALITE, SMOOTH_LUNALITE_STAIRS, SMOOTH_LUNALITE_SLAB);
            entries.addAfter(Blocks.POLISHED_BLACKSTONE_BRICK_WALL, GINGERBREAD_BLOCK, GLAZED_GINGERBREAD_BLOCK, GINGERBREAD_COOKIE_BLOCK, GINGERBREAD_DOOR,
                    GINGERBREAD_TRAPDOOR, GINGERBREAD_BRICKS, GINGERBREAD_BRICK_STAIRS, GINGERBREAD_BRICK_SLAB, GINGERBREAD_BRICK_WALL,
                    GLAZED_GINGERBREAD_BRICKS, GLAZED_GINGERBREAD_BRICK_STAIRS, GLAZED_GINGERBREAD_BRICK_SLAB, GLAZED_GINGERBREAD_BRICK_WALL, CANDY_CANE_BLOCK,
                    ICICLE_BLOCK, CHISELED_ICICLE_BLOCK, ICICLE_DOOR, ICICLE_TRAPDOOR, ICICLE_BARS,
                    Blocks.ICE, ICE_SHEET,
                    Blocks.PACKED_ICE, PACKED_ICE_STAIRS, PACKED_ICE_SLAB, PACKED_ICE_BRICKS, CHISELED_PACKED_ICE_BRICKS, PACKED_ICE_BRICK_STAIRS, PACKED_ICE_BRICK_SLAB, PACKED_ICE_BRICK_WALL,
                    Blocks.BLUE_ICE, BLUE_ICE_STAIRS, BLUE_ICE_SLAB, BLUE_ICE_BRICKS, CHISELED_BLUE_ICE_BRICKS, BLUE_ICE_BRICK_STAIRS, BLUE_ICE_BRICK_SLAB, BLUE_ICE_BRICK_WALL,
                    Blocks.SNOW_BLOCK, SNOW_STAIRS, SNOW_SLAB, SNOW_BRICKS, SNOW_BRICK_STAIRS, SNOW_BRICK_SLAB, SNOW_BRICK_WALL,
                    LAVENDER_THATCH, LAVENDER_THATCH_STAIRS, LAVENDER_THATCH_SLAB);
        });
        ItemGroupEvents.modifyEntriesEvent(FUNCTIONAL_BLOCKS).register(entries -> {
            entries.addBefore(Blocks.BAMBOO_SIGN, HOLLY_SIGNS.getFirst(), HOLLY_HANGING_SIGNS.getFirst(), CHESTNUT_SIGNS.getFirst(), CHESTNUT_HANGING_SIGNS.getFirst(), PINE_SIGNS.getFirst(), PINE_HANGING_SIGNS.getFirst());
            entries.addBefore(Blocks.ANVIL, FAIRY_LIGHT, SOUL_FAIRY_LIGHT);
            entries.addBefore(Blocks.ANVIL, NIGHT_FAIRY_LIGHT, REDSTONE_FAIRY_LIGHT);
            entries.addBefore(Blocks.CHAIN, ICE_LANTERN);
            entries.addAfter(Blocks.CHAIN, ICE_CHAIN);
            entries.addAfter(Blocks.JUKEBOX, CARVED_PINECONE_BLOCK, WILL_O_THE_WISP, ELDER_WING, ELDER_ORNAMENT, DREAM_CATCHER, FROSTBITER_TROPHY);
            entries.addAfter(Blocks.BOOKSHELF, HOLLY_BOOKSHELF, /*CHISELED_HOLLY_BOOKSHELF, */CHESTNUT_BOOKSHELF, PINE_BOOKSHELF);
            entries.addAfter(Blocks.SUSPICIOUS_GRAVEL, SUSPICIOUS_SNOW)
        });
        ItemGroupEvents.modifyEntriesEvent(COLORED_BLOCKS).register(entries -> {
            entries.addAfter(Blocks.PINK_CARPET, WHITE_PINECONE_SHINGLES, LIGHT_GRAY_PINECONE_SHINGLES, GRAY_PINECONE_SHINGLES, BLACK_PINECONE_SHINGLES, BROWN_PINECONE_SHINGLES, RED_PINECONE_SHINGLES, ORANGE_PINECONE_SHINGLES, YELLOW_PINECONE_SHINGLES, LIME_PINECONE_SHINGLES, GREEN_PINECONE_SHINGLES, CYAN_PINECONE_SHINGLES, LIGHT_BLUE_PINECONE_SHINGLES, BLUE_PINECONE_SHINGLES, PURPLE_PINECONE_SHINGLES, MAGENTA_PINECONE_SHINGLES, PINK_PINECONE_SHINGLES,
                    WHITE_PINECONE_SHINGLE_STAIRS, LIGHT_GRAY_PINECONE_SHINGLE_STAIRS, GRAY_PINECONE_SHINGLE_STAIRS, BLACK_PINECONE_SHINGLE_STAIRS, BROWN_PINECONE_SHINGLE_STAIRS, RED_PINECONE_SHINGLE_STAIRS, ORANGE_PINECONE_SHINGLE_STAIRS, YELLOW_PINECONE_SHINGLE_STAIRS, LIME_PINECONE_SHINGLE_STAIRS, GREEN_PINECONE_SHINGLE_STAIRS, CYAN_PINECONE_SHINGLE_STAIRS, LIGHT_BLUE_PINECONE_SHINGLE_STAIRS, BLUE_PINECONE_SHINGLE_STAIRS, PURPLE_PINECONE_SHINGLE_STAIRS, MAGENTA_PINECONE_SHINGLE_STAIRS, PINK_PINECONE_SHINGLE_STAIRS,
                    WHITE_PINECONE_SHINGLE_SLAB, LIGHT_GRAY_PINECONE_SHINGLE_SLAB, GRAY_PINECONE_SHINGLE_SLAB, BLACK_PINECONE_SHINGLE_SLAB, BROWN_PINECONE_SHINGLE_SLAB, RED_PINECONE_SHINGLE_SLAB, ORANGE_PINECONE_SHINGLE_SLAB, YELLOW_PINECONE_SHINGLE_SLAB, LIME_PINECONE_SHINGLE_SLAB, GREEN_PINECONE_SHINGLE_SLAB, CYAN_PINECONE_SHINGLE_SLAB, LIGHT_BLUE_PINECONE_SHINGLE_SLAB, BLUE_PINECONE_SHINGLE_SLAB, PURPLE_PINECONE_SHINGLE_SLAB, MAGENTA_PINECONE_SHINGLE_SLAB, PINK_PINECONE_SHINGLE_SLAB)
        });
        ItemGroupEvents.modifyEntriesEvent(NATURAL_BLOCKS).register(entries -> {
            entries.addAfter(Blocks.PODZOL, GELISOL);
            entries.addAfter(Blocks.DIRT_PATH, GELISOL_PATH);
            entries.addAfter(Blocks.ROOTED_DIRT, GINGER_SOIL);
            entries.addAfter(Blocks.MOSS_BLOCK, DRY_MOSS_BLOCK);
            entries.addAfter(Blocks.MOSS_CARPET, DRY_MOSS_CARPET);
            entries.addAfter(Blocks.FERN, GELISOL_GRASS);
            entries.addBefore(Blocks.MUSHROOM_STEM, HOLLY_LOG, CHESTNUT_LOG, PINE_LOG, WEATHERED_PINE_LOG);
            entries.addBefore(Blocks.AZALEA, HOLLY_SAPLING, CHESTNUT_SAPLING, PINE_SAPLING);
            entries.addBefore(Blocks.AZALEA_LEAVES, HOLLY_LEAVES);
            entries.addBefore(Blocks.AZALEA_LEAVES, CHESTNUT_LEAVES);
            entries.addBefore(Blocks.AZALEA_LEAVES, PINE_LEAVES);
            entries.addAfter(Blocks.LILY_OF_THE_VALLEY, FOXGLOVE, MOSS_CAMPION, MIMOSA, SNOWDROP, NIGHTSHADE, BLUEBELLS,
                    BLUE_ROSE, BLUE_ROSE_BUSH, RED_ROSE, RED_ROSE_BUSH, WHITE_ROSE, WHITE_ROSE_BUSH, YELLOW_ROSE, YELLOW_ROSE_BUSH);
            entries.addBefore(Blocks.CRIMSON_ROOTS, MOSSY_SPROUTS, DRY_MOSSY_SPROUTS, SNOWY_SPROUTS, WILD_GINGER);
            entries.addAfter(Blocks.SUNFLOWER, LIONS_TAIL, LUPINE);
            entries.addAfter(Blocks.BAMBOO, PINECONE, PINECONE_BLOCK, ELDER_WING, ELDER_ORNAMENT, DREAM_CATCHER);
            entries.addAfter(Blocks.SUGAR_CANE, LAVENDER, ICICLES);
            entries.addAfter(Blocks.HONEY_BLOCK, PINECONE_JAM_BLOCK);
            entries.addAfter(Items.SWEET_BERRIES, WILD_BERRIES);
            entries.addAfter(Blocks.HAY_BLOCK, LAVENDER_BALE, CHESTNUT_CRATE, ROASTED_CHESTNUT_CRATE, GINGER_ROOT_CRATE, HOLLY_BERRY_BASKET, WILD_BERRY_BASKET);
            entries.addAfter(Blocks.FLOWERING_AZALEA, HOLLY_WREATH, VINE_WREATH, PINECONE_WREATH, CHERRY_WREATH);
            entries.addAfter(Blocks.ACACIA_SAPLING, FLOWERING_ACACIA_SAPLING);
            entries.addAfter(Blocks.ACACIA_LEAVES, FLOWERING_ACACIA_LEAVES);
            entries.addAfter(Blocks.PINK_PETALS, YELLOW_PETALS);
        });
        ItemGroupEvents.modifyEntriesEvent(REDSTONE_BLOCKS).register(entries -> {
            entries.addAfter(Blocks.COMPARATOR, REDSTONE_FAIRY_LIGHT);
            entries.addAfter(Blocks.HONEY_BLOCK, PINECONE_JAM_BLOCK);
            entries.addAfter(Blocks.NOTE_BLOCK, CARVED_PINECONE_BLOCK);
        });
        ItemGroupEvents.modifyEntriesEvent(COMBAT).register(entries -> {
            entries.addAfter(Items.SPECTRAL_ARROW, FROST_ARROW);
            entries.addAfter(Items.TURTLE_HELMET, ANTLER_HELMET, FEATHER_CLOAK, SNOW_BOOTS, LAVENDER_CROWN);
        });
        ItemGroupEvents.modifyEntriesEvent(INGREDIENTS).register(entries -> {
            entries.addAfter(Items.HONEYCOMB, PINECONE, HOLLY_BERRIES);
            entries.addAfter(Items.FEATHER, ELDER_FEATHER);
            entries.addAfter(Items.WHEAT, LAVENDER);
            entries.addAfter(Items.SNOWBALL, ICICLES, FROZEN_BRANCH);
            entries.addAfter(Items.PIGLIN_BANNER_PATTERN, SNOW_GOLEM_BANNER_PATTERN, SNOW_CHARGE_BANNER_PATTERN, ROSE_FLOWER_BANNER_PATTERN);
            entries.addAfter(Items.SNORT_POTTERY_SHERD, HOOT_POTTERY_SHERD, PLUMAGE_POTTERY_SHERD, OFFSHOOT_POTTERY_SHERD, FLAKE_POTTERY_SHERD, DRUPES_POTTERY_SHERD);

        });
        ItemGroupEvents.modifyEntriesEvent(TOOLS_AND_UTILITIES).register(entries -> {
            entries.addBefore(Items.BAMBOO_RAFT, HOLLY_BOAT.getFirst(), HOLLY_BOAT.getSecond());
            entries.addBefore(Items.BAMBOO_RAFT, CHESTNUT_BOAT.getFirst(), CHESTNUT_BOAT.getSecond());
            entries.addBefore(Items.BAMBOO_RAFT, PINE_BOAT.getFirst(), PINE_BOAT.getSecond());
            entries.addBefore(Items.FISHING_ROD, WOODEN_BUCKET, WOODEN_WATER_BUCKET, WOODEN_POWDER_SNOW_BUCKET, WOODEN_MILK_BUCKET);
            entries.addAfter(Items.MUSIC_DISC_OTHERSIDE, MUSIC_DISC_RAIN, MUSIC_DISC_SNOW, MUSIC_DISC_BUMBLEBEE);
            entries.addAfter(Items.CARROT_ON_A_STICK, HOLLY_BERRIES_ON_A_STICK);
        });
        ItemGroupEvents.modifyEntriesEvent(FOOD_AND_DRINKS).register(entries -> {
                entries.addAfter(Items.HONEY_BOTTLE, PINECONE_JAM_BOTTLE, LAVENDER_TEA, GINGER_TEA);
                entries.addBefore(Items.CAKE, CANDY_CANE);
                entries.addAfter(Items.COOKIE, GINGERBREAD_COOKIE);
                entries.addAfter(Items.SWEET_BERRIES, WILD_BERRIES);
                entries.addAfter(Items.GOLDEN_CARROT, CHESTNUTS, ROASTED_CHESTNUTS);
                entries.addAfter(Items.RABBIT_STEW, CHESTNUT_SOUP, GOAT_STEW);
                entries.addAfter(Items.PUMPKIN_PIE, MUTTON_PIE);
                entries.addAfter(Items.CAKE, CHRISTMAS_PUDDING);
                entries.addAfter(Items.POISONOUS_POTATO, GINGER_ROOT, SPICY_SNOW_CONE, SWEET_SNOW_CONE, MINTY_SNOW_CONE);
                entries.addAfter(Items.COOKED_MUTTON, GOAT, COOKED_GOAT);
                entries.addAfter(Items.MILK_BUCKET, WOODEN_MILK_BUCKET);
                entries.addAfter(Items.ROTTEN_FLESH, FROZEN_FLESH);
        });
        ItemGroupEvents.modifyEntriesEvent(SPAWN_EGGS).register(entries -> entries.addAfter(Items.CHICKEN_SPAWN_EGG, CHILLED_SPAWN_EGG, FROSTBITER_SPAWN_EGG));
    }
}
